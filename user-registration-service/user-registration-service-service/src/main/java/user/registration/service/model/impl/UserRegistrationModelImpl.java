/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package user.registration.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import user.registration.service.model.UserRegistration;
import user.registration.service.model.UserRegistrationModel;

/**
 * The base model implementation for the UserRegistration service. Represents a row in the &quot;UserRegistration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UserRegistrationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserRegistrationImpl
 * @generated
 */
public class UserRegistrationModelImpl
	extends BaseModelImpl<UserRegistration> implements UserRegistrationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user registration model instance should use the <code>UserRegistration</code> interface instead.
	 */
	public static final String TABLE_NAME = "UserRegistration";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"userRegistrationId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"surname", Types.VARCHAR},
		{"birthdate", Types.TIMESTAMP}, {"email", Types.VARCHAR},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"field1", Types.VARCHAR}, {"field2", Types.BOOLEAN},
		{"field3", Types.INTEGER}, {"field4", Types.TIMESTAMP},
		{"field5", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userRegistrationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("surname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("birthdate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("field1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("field2", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("field3", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("field4", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("field5", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table UserRegistration (uuid_ VARCHAR(75) null,userRegistrationId LONG not null primary key,name VARCHAR(75) null,surname VARCHAR(75) null,birthdate DATE null,email VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,field1 VARCHAR(75) null,field2 BOOLEAN,field3 INTEGER,field4 DATE null,field5 VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table UserRegistration";

	public static final String ORDER_BY_JPQL =
		" ORDER BY userRegistration.field1 ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY UserRegistration.field1 ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long FIELD2_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static final long FIELD1_COLUMN_BITMASK = 16L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public UserRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userRegistrationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserRegistrationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userRegistrationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return UserRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UserRegistration, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UserRegistration, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserRegistration, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((UserRegistration)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UserRegistration, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UserRegistration, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UserRegistration)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UserRegistration, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UserRegistration, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, UserRegistration>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			UserRegistration.class.getClassLoader(), UserRegistration.class,
			ModelWrapper.class);

		try {
			Constructor<UserRegistration> constructor =
				(Constructor<UserRegistration>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<UserRegistration, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<UserRegistration, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<UserRegistration, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<UserRegistration, Object>>();
		Map<String, BiConsumer<UserRegistration, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<UserRegistration, ?>>();

		attributeGetterFunctions.put("uuid", UserRegistration::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<UserRegistration, String>)UserRegistration::setUuid);
		attributeGetterFunctions.put(
			"userRegistrationId", UserRegistration::getUserRegistrationId);
		attributeSetterBiConsumers.put(
			"userRegistrationId",
			(BiConsumer<UserRegistration, Long>)
				UserRegistration::setUserRegistrationId);
		attributeGetterFunctions.put("name", UserRegistration::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<UserRegistration, String>)UserRegistration::setName);
		attributeGetterFunctions.put("surname", UserRegistration::getSurname);
		attributeSetterBiConsumers.put(
			"surname",
			(BiConsumer<UserRegistration, String>)UserRegistration::setSurname);
		attributeGetterFunctions.put(
			"birthdate", UserRegistration::getBirthdate);
		attributeSetterBiConsumers.put(
			"birthdate",
			(BiConsumer<UserRegistration, Date>)UserRegistration::setBirthdate);
		attributeGetterFunctions.put("email", UserRegistration::getEmail);
		attributeSetterBiConsumers.put(
			"email",
			(BiConsumer<UserRegistration, String>)UserRegistration::setEmail);
		attributeGetterFunctions.put("groupId", UserRegistration::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<UserRegistration, Long>)UserRegistration::setGroupId);
		attributeGetterFunctions.put(
			"companyId", UserRegistration::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<UserRegistration, Long>)UserRegistration::setCompanyId);
		attributeGetterFunctions.put("userId", UserRegistration::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<UserRegistration, Long>)UserRegistration::setUserId);
		attributeGetterFunctions.put("userName", UserRegistration::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<UserRegistration, String>)
				UserRegistration::setUserName);
		attributeGetterFunctions.put(
			"createDate", UserRegistration::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<UserRegistration, Date>)
				UserRegistration::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", UserRegistration::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<UserRegistration, Date>)
				UserRegistration::setModifiedDate);
		attributeGetterFunctions.put("field1", UserRegistration::getField1);
		attributeSetterBiConsumers.put(
			"field1",
			(BiConsumer<UserRegistration, String>)UserRegistration::setField1);
		attributeGetterFunctions.put("field2", UserRegistration::getField2);
		attributeSetterBiConsumers.put(
			"field2",
			(BiConsumer<UserRegistration, Boolean>)UserRegistration::setField2);
		attributeGetterFunctions.put("field3", UserRegistration::getField3);
		attributeSetterBiConsumers.put(
			"field3",
			(BiConsumer<UserRegistration, Integer>)UserRegistration::setField3);
		attributeGetterFunctions.put("field4", UserRegistration::getField4);
		attributeSetterBiConsumers.put(
			"field4",
			(BiConsumer<UserRegistration, Date>)UserRegistration::setField4);
		attributeGetterFunctions.put("field5", UserRegistration::getField5);
		attributeSetterBiConsumers.put(
			"field5",
			(BiConsumer<UserRegistration, String>)UserRegistration::setField5);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getUserRegistrationId() {
		return _userRegistrationId;
	}

	@Override
	public void setUserRegistrationId(long userRegistrationId) {
		_userRegistrationId = userRegistrationId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getSurname() {
		if (_surname == null) {
			return "";
		}
		else {
			return _surname;
		}
	}

	@Override
	public void setSurname(String surname) {
		_surname = surname;
	}

	@Override
	public Date getBirthdate() {
		return _birthdate;
	}

	@Override
	public void setBirthdate(Date birthdate) {
		_birthdate = birthdate;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getField1() {
		if (_field1 == null) {
			return "";
		}
		else {
			return _field1;
		}
	}

	@Override
	public void setField1(String field1) {
		_field1 = field1;
	}

	@Override
	public boolean getField2() {
		return _field2;
	}

	@Override
	public boolean isField2() {
		return _field2;
	}

	@Override
	public void setField2(boolean field2) {
		_columnBitmask |= FIELD2_COLUMN_BITMASK;

		if (!_setOriginalField2) {
			_setOriginalField2 = true;

			_originalField2 = _field2;
		}

		_field2 = field2;
	}

	public boolean getOriginalField2() {
		return _originalField2;
	}

	@Override
	public int getField3() {
		return _field3;
	}

	@Override
	public void setField3(int field3) {
		_field3 = field3;
	}

	@Override
	public Date getField4() {
		return _field4;
	}

	@Override
	public void setField4(Date field4) {
		_field4 = field4;
	}

	@Override
	public String getField5() {
		if (_field5 == null) {
			return "";
		}
		else {
			return _field5;
		}
	}

	@Override
	public void setField5(String field5) {
		_field5 = field5;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(UserRegistration.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), UserRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserRegistration toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, UserRegistration>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserRegistrationImpl userRegistrationImpl = new UserRegistrationImpl();

		userRegistrationImpl.setUuid(getUuid());
		userRegistrationImpl.setUserRegistrationId(getUserRegistrationId());
		userRegistrationImpl.setName(getName());
		userRegistrationImpl.setSurname(getSurname());
		userRegistrationImpl.setBirthdate(getBirthdate());
		userRegistrationImpl.setEmail(getEmail());
		userRegistrationImpl.setGroupId(getGroupId());
		userRegistrationImpl.setCompanyId(getCompanyId());
		userRegistrationImpl.setUserId(getUserId());
		userRegistrationImpl.setUserName(getUserName());
		userRegistrationImpl.setCreateDate(getCreateDate());
		userRegistrationImpl.setModifiedDate(getModifiedDate());
		userRegistrationImpl.setField1(getField1());
		userRegistrationImpl.setField2(isField2());
		userRegistrationImpl.setField3(getField3());
		userRegistrationImpl.setField4(getField4());
		userRegistrationImpl.setField5(getField5());

		userRegistrationImpl.resetOriginalValues();

		return userRegistrationImpl;
	}

	@Override
	public int compareTo(UserRegistration userRegistration) {
		int value = 0;

		value = getField1().compareTo(userRegistration.getField1());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof UserRegistration)) {
			return false;
		}

		UserRegistration userRegistration = (UserRegistration)object;

		long primaryKey = userRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalCompanyId = _companyId;

		_setOriginalCompanyId = false;

		_setModifiedDate = false;

		_originalField2 = _field2;

		_setOriginalField2 = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<UserRegistration> toCacheModel() {
		UserRegistrationCacheModel userRegistrationCacheModel =
			new UserRegistrationCacheModel();

		userRegistrationCacheModel.uuid = getUuid();

		String uuid = userRegistrationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			userRegistrationCacheModel.uuid = null;
		}

		userRegistrationCacheModel.userRegistrationId = getUserRegistrationId();

		userRegistrationCacheModel.name = getName();

		String name = userRegistrationCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			userRegistrationCacheModel.name = null;
		}

		userRegistrationCacheModel.surname = getSurname();

		String surname = userRegistrationCacheModel.surname;

		if ((surname != null) && (surname.length() == 0)) {
			userRegistrationCacheModel.surname = null;
		}

		Date birthdate = getBirthdate();

		if (birthdate != null) {
			userRegistrationCacheModel.birthdate = birthdate.getTime();
		}
		else {
			userRegistrationCacheModel.birthdate = Long.MIN_VALUE;
		}

		userRegistrationCacheModel.email = getEmail();

		String email = userRegistrationCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			userRegistrationCacheModel.email = null;
		}

		userRegistrationCacheModel.groupId = getGroupId();

		userRegistrationCacheModel.companyId = getCompanyId();

		userRegistrationCacheModel.userId = getUserId();

		userRegistrationCacheModel.userName = getUserName();

		String userName = userRegistrationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			userRegistrationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			userRegistrationCacheModel.createDate = createDate.getTime();
		}
		else {
			userRegistrationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			userRegistrationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			userRegistrationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		userRegistrationCacheModel.field1 = getField1();

		String field1 = userRegistrationCacheModel.field1;

		if ((field1 != null) && (field1.length() == 0)) {
			userRegistrationCacheModel.field1 = null;
		}

		userRegistrationCacheModel.field2 = isField2();

		userRegistrationCacheModel.field3 = getField3();

		Date field4 = getField4();

		if (field4 != null) {
			userRegistrationCacheModel.field4 = field4.getTime();
		}
		else {
			userRegistrationCacheModel.field4 = Long.MIN_VALUE;
		}

		userRegistrationCacheModel.field5 = getField5();

		String field5 = userRegistrationCacheModel.field5;

		if ((field5 != null) && (field5.length() == 0)) {
			userRegistrationCacheModel.field5 = null;
		}

		return userRegistrationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UserRegistration, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UserRegistration, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserRegistration, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((UserRegistration)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<UserRegistration, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<UserRegistration, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserRegistration, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((UserRegistration)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, UserRegistration>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _userRegistrationId;
	private String _name;
	private String _surname;
	private Date _birthdate;
	private String _email;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _field1;
	private boolean _field2;
	private boolean _originalField2;
	private boolean _setOriginalField2;
	private int _field3;
	private Date _field4;
	private String _field5;
	private long _columnBitmask;
	private UserRegistration _escapedModel;

}